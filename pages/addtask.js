import Head from "next/head";
import { useContext } from "react";
// import { BsCloudUploadFill } from 'react-icons/bs';
import { useForm } from "react-hook-form";
import { AuthContext } from "../Context/AuthProvider";

export default function Home() {
  const { user } = useContext(AuthContext);
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm();
  const imageHostKey = "7cf80fb1cd672c8c2a1fa578e87db0f5";
  console.log(imageHostKey);

  const handleAddTask = (data) => {
    const email = user?.email || "unregistered";
    const image = data.image[0];
    const formData = new FormData();
    formData.append("image", image);
    const url = `https://api.imgbb.com/1/upload?key=${imageHostKey}`;

    fetch(url, {
      method: "POST",
      body: formData,
    })
      .then((res) => res.json())
      .then((imgData) => {
        if (imgData.success) {
          // data
          const task = {
            TaskName: data.task,
            userEmail: email,
            image: imgData.data.url,
            completed: false,
          };
          console.log(task);
          // save all task data to database
          fetch(`https://todo-app-server-rho.vercel.app/tasks`, {
            method: "POST",
            headers: {
              "content-type": "application/json",
            },
            body: JSON.stringify(task),
          })
            .then((res) => res.json())
            .then((result) => {
              console.log(result);

              // toast.success(`${data.name} is added successfully`)
              // navigate('/dashboard/manageDoctors')
            });
        }
      });
  };

  return (
    <>
      <Head>
        <title>toDO's</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* Add Task  */}

      <main className="min-h-screen">
        <div className=" py-20 flex justify-center ">
          <div className="w-full max-w-md p-4 border border-gray-200 rounded-lg shadow-lg sm:p-6 md:p-8 dark:bg-gray-800 dark:border-gray-700 ">
            <form onSubmit={handleSubmit(handleAddTask)}>
              <div className="space-y-6" action="#">
                <h5 className="text-xl font-medium text-gray-900 dark:text-white text-center">
                  Add Your Task
                </h5>

                <label
                  htmlFor="website-admin"
                  className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                ></label>
                <div className="flex">
                  <input
                    type="text"
                    {...register("task", { required: true })}
                    id="website-admin"
                    className=" rounded-lg bg-gray-50 border border-gray-300 text-gray-900 focus:ring-blue-500 focus:border-blue-500 block flex-1 min-w-0 w-full text-sm p-2.5  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 shadow-lg"
                    placeholder="+ add task"
                  />
                  {errors.task && (
                    <span>
                      <small className="text-red-600">name is required</small>
                    </span>
                  )}
                </div>

                <div className=" rounded-lg bg-gray-50 border border-gray-300 text-gray-900 focus:ring-blue-500 focus:border-blue-500 block flex-1 min-w-0 w-full text-sm p-2.5  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                  <input
                    type="file"
                    {...register("image", { required: true })}
                    className=" "
                  />
                  {errors.image && (
                    <span>
                      <small className="text-red-600">Image is required</small>
                    </span>
                  )}
                </div>

                <input
                  type="submit"
                  value="Create"
                  className="w-full text-white bg-black hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-indigo-800 dark:focus:ring-blue-800"
                />
              </div>
            </form>
          </div>
        </div>
      </main>
    </>
  );
}
